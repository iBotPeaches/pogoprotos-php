<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: POGOProtos/Settings/TelemetryGlobalSettings.proto

namespace POGOProtos\Settings;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>POGOProtos.Settings.TelemetryGlobalSettings</code>
 */
class TelemetryGlobalSettings extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>bool enabled = 1;</code>
     */
    private $enabled = false;
    /**
     * <code>double session_sampling_fraction = 2;</code>
     */
    private $session_sampling_fraction = 0.0;
    /**
     * <code>int32 max_buffer_size_kb = 3;</code>
     */
    private $max_buffer_size_kb = 0;
    /**
     * <code>int32 batch_size = 4;</code>
     */
    private $batch_size = 0;
    /**
     * <code>int64 update_interval_ms = 5;</code>
     */
    private $update_interval_ms = 0;
    /**
     * <code>int64 frame_rate_sample_interval_ms = 6;</code>
     */
    private $frame_rate_sample_interval_ms = 0;
    /**
     * <code>int64 frame_rate_sample_period_ms = 7;</code>
     */
    private $frame_rate_sample_period_ms = 0;

    public function __construct() {
        \GPBMetadata\POGOProtos\Settings\TelemetryGlobalSettings::initOnce();
        parent::__construct();
    }

    /**
     * <code>bool enabled = 1;</code>
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * <code>bool enabled = 1;</code>
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;
    }

    /**
     * <code>double session_sampling_fraction = 2;</code>
     */
    public function getSessionSamplingFraction()
    {
        return $this->session_sampling_fraction;
    }

    /**
     * <code>double session_sampling_fraction = 2;</code>
     */
    public function setSessionSamplingFraction($var)
    {
        GPBUtil::checkDouble($var);
        $this->session_sampling_fraction = $var;
    }

    /**
     * <code>int32 max_buffer_size_kb = 3;</code>
     */
    public function getMaxBufferSizeKb()
    {
        return $this->max_buffer_size_kb;
    }

    /**
     * <code>int32 max_buffer_size_kb = 3;</code>
     */
    public function setMaxBufferSizeKb($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_buffer_size_kb = $var;
    }

    /**
     * <code>int32 batch_size = 4;</code>
     */
    public function getBatchSize()
    {
        return $this->batch_size;
    }

    /**
     * <code>int32 batch_size = 4;</code>
     */
    public function setBatchSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->batch_size = $var;
    }

    /**
     * <code>int64 update_interval_ms = 5;</code>
     */
    public function getUpdateIntervalMs()
    {
        return $this->update_interval_ms;
    }

    /**
     * <code>int64 update_interval_ms = 5;</code>
     */
    public function setUpdateIntervalMs($var)
    {
        GPBUtil::checkInt64($var);
        $this->update_interval_ms = $var;
    }

    /**
     * <code>int64 frame_rate_sample_interval_ms = 6;</code>
     */
    public function getFrameRateSampleIntervalMs()
    {
        return $this->frame_rate_sample_interval_ms;
    }

    /**
     * <code>int64 frame_rate_sample_interval_ms = 6;</code>
     */
    public function setFrameRateSampleIntervalMs($var)
    {
        GPBUtil::checkInt64($var);
        $this->frame_rate_sample_interval_ms = $var;
    }

    /**
     * <code>int64 frame_rate_sample_period_ms = 7;</code>
     */
    public function getFrameRateSamplePeriodMs()
    {
        return $this->frame_rate_sample_period_ms;
    }

    /**
     * <code>int64 frame_rate_sample_period_ms = 7;</code>
     */
    public function setFrameRateSamplePeriodMs($var)
    {
        GPBUtil::checkInt64($var);
        $this->frame_rate_sample_period_ms = $var;
    }

}

