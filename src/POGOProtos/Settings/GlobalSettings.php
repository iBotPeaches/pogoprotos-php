<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Settings/GlobalSettings.proto
 */


namespace POGOProtos\Settings;

/**
 * Protobuf message : POGOProtos.Settings.GlobalSettings
 */
class GlobalSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * fort_settings optional message = 2
     *
     * @var \POGOProtos\Settings\FortSettings
     */
    protected $fort_settings = null;

    /**
     * map_settings optional message = 3
     *
     * @var \POGOProtos\Settings\MapSettings
     */
    protected $map_settings = null;

    /**
     * level_settings optional message = 4
     *
     * @var \POGOProtos\Settings\LevelSettings
     */
    protected $level_settings = null;

    /**
     * inventory_settings optional message = 5
     *
     * @var \POGOProtos\Settings\InventorySettings
     */
    protected $inventory_settings = null;

    /**
     * minimum_client_version optional string = 6
     *
     * @var string
     */
    protected $minimum_client_version = null;

    /**
     * gps_settings optional message = 7
     *
     * @var \POGOProtos\Settings\GpsSettings
     */
    protected $gps_settings = null;

    /**
     * festival_settings optional message = 8
     *
     * @var \POGOProtos\Settings\FestivalSettings
     */
    protected $festival_settings = null;

    /**
     * event_settings optional message = 9
     *
     * @var \POGOProtos\Settings\EventSettings
     */
    protected $event_settings = null;

    /**
     * max_pokemon_types optional int32 = 10
     *
     * @var int
     */
    protected $max_pokemon_types = null;

    /**
     * sfida_settings optional message = 11
     *
     * @var \POGOProtos\Settings\SfidaSettings
     */
    protected $sfida_settings = null;

    /**
     * news_settings optional message = 12
     *
     * @var \POGOProtos\Settings\NewsSettings
     */
    protected $news_settings = null;

    /**
     * translation_settings optional message = 13
     *
     * @var \POGOProtos\Settings\TranslationSettings
     */
    protected $translation_settings = null;

    /**
     * passcode_settings optional message = 14
     *
     * @var \POGOProtos\Settings\PasscodeSettings
     */
    protected $passcode_settings = null;

    /**
     * notification_settings optional message = 15
     *
     * @var \POGOProtos\Settings\NotificationSettings
     */
    protected $notification_settings = null;

    /**
     * Check if 'fort_settings' has a value
     *
     * @return bool
     */
    public function hasFortSettings()
    {
        return $this->fort_settings !== null;
    }

    /**
     * Get 'fort_settings' value
     *
     * @return \POGOProtos\Settings\FortSettings
     */
    public function getFortSettings()
    {
        return $this->fort_settings;
    }

    /**
     * Set 'fort_settings' value
     *
     * @param \POGOProtos\Settings\FortSettings $value
     */
    public function setFortSettings(\POGOProtos\Settings\FortSettings $value = null)
    {
        $this->fort_settings = $value;
    }

    /**
     * Check if 'map_settings' has a value
     *
     * @return bool
     */
    public function hasMapSettings()
    {
        return $this->map_settings !== null;
    }

    /**
     * Get 'map_settings' value
     *
     * @return \POGOProtos\Settings\MapSettings
     */
    public function getMapSettings()
    {
        return $this->map_settings;
    }

    /**
     * Set 'map_settings' value
     *
     * @param \POGOProtos\Settings\MapSettings $value
     */
    public function setMapSettings(\POGOProtos\Settings\MapSettings $value = null)
    {
        $this->map_settings = $value;
    }

    /**
     * Check if 'level_settings' has a value
     *
     * @return bool
     */
    public function hasLevelSettings()
    {
        return $this->level_settings !== null;
    }

    /**
     * Get 'level_settings' value
     *
     * @return \POGOProtos\Settings\LevelSettings
     */
    public function getLevelSettings()
    {
        return $this->level_settings;
    }

    /**
     * Set 'level_settings' value
     *
     * @param \POGOProtos\Settings\LevelSettings $value
     */
    public function setLevelSettings(\POGOProtos\Settings\LevelSettings $value = null)
    {
        $this->level_settings = $value;
    }

    /**
     * Check if 'inventory_settings' has a value
     *
     * @return bool
     */
    public function hasInventorySettings()
    {
        return $this->inventory_settings !== null;
    }

    /**
     * Get 'inventory_settings' value
     *
     * @return \POGOProtos\Settings\InventorySettings
     */
    public function getInventorySettings()
    {
        return $this->inventory_settings;
    }

    /**
     * Set 'inventory_settings' value
     *
     * @param \POGOProtos\Settings\InventorySettings $value
     */
    public function setInventorySettings(\POGOProtos\Settings\InventorySettings $value = null)
    {
        $this->inventory_settings = $value;
    }

    /**
     * Check if 'minimum_client_version' has a value
     *
     * @return bool
     */
    public function hasMinimumClientVersion()
    {
        return $this->minimum_client_version !== null;
    }

    /**
     * Get 'minimum_client_version' value
     *
     * @return string
     */
    public function getMinimumClientVersion()
    {
        return $this->minimum_client_version;
    }

    /**
     * Set 'minimum_client_version' value
     *
     * @param string $value
     */
    public function setMinimumClientVersion($value = null)
    {
        $this->minimum_client_version = $value;
    }

    /**
     * Check if 'gps_settings' has a value
     *
     * @return bool
     */
    public function hasGpsSettings()
    {
        return $this->gps_settings !== null;
    }

    /**
     * Get 'gps_settings' value
     *
     * @return \POGOProtos\Settings\GpsSettings
     */
    public function getGpsSettings()
    {
        return $this->gps_settings;
    }

    /**
     * Set 'gps_settings' value
     *
     * @param \POGOProtos\Settings\GpsSettings $value
     */
    public function setGpsSettings(\POGOProtos\Settings\GpsSettings $value = null)
    {
        $this->gps_settings = $value;
    }

    /**
     * Check if 'festival_settings' has a value
     *
     * @return bool
     */
    public function hasFestivalSettings()
    {
        return $this->festival_settings !== null;
    }

    /**
     * Get 'festival_settings' value
     *
     * @return \POGOProtos\Settings\FestivalSettings
     */
    public function getFestivalSettings()
    {
        return $this->festival_settings;
    }

    /**
     * Set 'festival_settings' value
     *
     * @param \POGOProtos\Settings\FestivalSettings $value
     */
    public function setFestivalSettings(\POGOProtos\Settings\FestivalSettings $value = null)
    {
        $this->festival_settings = $value;
    }

    /**
     * Check if 'event_settings' has a value
     *
     * @return bool
     */
    public function hasEventSettings()
    {
        return $this->event_settings !== null;
    }

    /**
     * Get 'event_settings' value
     *
     * @return \POGOProtos\Settings\EventSettings
     */
    public function getEventSettings()
    {
        return $this->event_settings;
    }

    /**
     * Set 'event_settings' value
     *
     * @param \POGOProtos\Settings\EventSettings $value
     */
    public function setEventSettings(\POGOProtos\Settings\EventSettings $value = null)
    {
        $this->event_settings = $value;
    }

    /**
     * Check if 'max_pokemon_types' has a value
     *
     * @return bool
     */
    public function hasMaxPokemonTypes()
    {
        return $this->max_pokemon_types !== null;
    }

    /**
     * Get 'max_pokemon_types' value
     *
     * @return int
     */
    public function getMaxPokemonTypes()
    {
        return $this->max_pokemon_types;
    }

    /**
     * Set 'max_pokemon_types' value
     *
     * @param int $value
     */
    public function setMaxPokemonTypes($value = null)
    {
        $this->max_pokemon_types = $value;
    }

    /**
     * Check if 'sfida_settings' has a value
     *
     * @return bool
     */
    public function hasSfidaSettings()
    {
        return $this->sfida_settings !== null;
    }

    /**
     * Get 'sfida_settings' value
     *
     * @return \POGOProtos\Settings\SfidaSettings
     */
    public function getSfidaSettings()
    {
        return $this->sfida_settings;
    }

    /**
     * Set 'sfida_settings' value
     *
     * @param \POGOProtos\Settings\SfidaSettings $value
     */
    public function setSfidaSettings(\POGOProtos\Settings\SfidaSettings $value = null)
    {
        $this->sfida_settings = $value;
    }

    /**
     * Check if 'news_settings' has a value
     *
     * @return bool
     */
    public function hasNewsSettings()
    {
        return $this->news_settings !== null;
    }

    /**
     * Get 'news_settings' value
     *
     * @return \POGOProtos\Settings\NewsSettings
     */
    public function getNewsSettings()
    {
        return $this->news_settings;
    }

    /**
     * Set 'news_settings' value
     *
     * @param \POGOProtos\Settings\NewsSettings $value
     */
    public function setNewsSettings(\POGOProtos\Settings\NewsSettings $value = null)
    {
        $this->news_settings = $value;
    }

    /**
     * Check if 'translation_settings' has a value
     *
     * @return bool
     */
    public function hasTranslationSettings()
    {
        return $this->translation_settings !== null;
    }

    /**
     * Get 'translation_settings' value
     *
     * @return \POGOProtos\Settings\TranslationSettings
     */
    public function getTranslationSettings()
    {
        return $this->translation_settings;
    }

    /**
     * Set 'translation_settings' value
     *
     * @param \POGOProtos\Settings\TranslationSettings $value
     */
    public function setTranslationSettings(\POGOProtos\Settings\TranslationSettings $value = null)
    {
        $this->translation_settings = $value;
    }

    /**
     * Check if 'passcode_settings' has a value
     *
     * @return bool
     */
    public function hasPasscodeSettings()
    {
        return $this->passcode_settings !== null;
    }

    /**
     * Get 'passcode_settings' value
     *
     * @return \POGOProtos\Settings\PasscodeSettings
     */
    public function getPasscodeSettings()
    {
        return $this->passcode_settings;
    }

    /**
     * Set 'passcode_settings' value
     *
     * @param \POGOProtos\Settings\PasscodeSettings $value
     */
    public function setPasscodeSettings(\POGOProtos\Settings\PasscodeSettings $value = null)
    {
        $this->passcode_settings = $value;
    }

    /**
     * Check if 'notification_settings' has a value
     *
     * @return bool
     */
    public function hasNotificationSettings()
    {
        return $this->notification_settings !== null;
    }

    /**
     * Get 'notification_settings' value
     *
     * @return \POGOProtos\Settings\NotificationSettings
     */
    public function getNotificationSettings()
    {
        return $this->notification_settings;
    }

    /**
     * Set 'notification_settings' value
     *
     * @param \POGOProtos\Settings\NotificationSettings $value
     */
    public function setNotificationSettings(\POGOProtos\Settings\NotificationSettings $value = null)
    {
        $this->notification_settings = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'fort_settings' => null,
            'map_settings' => null,
            'level_settings' => null,
            'inventory_settings' => null,
            'minimum_client_version' => null,
            'gps_settings' => null,
            'festival_settings' => null,
            'event_settings' => null,
            'max_pokemon_types' => null,
            'sfida_settings' => null,
            'news_settings' => null,
            'translation_settings' => null,
            'passcode_settings' => null,
            'notification_settings' => null
        ], $values);

        $message->setFortSettings($values['fort_settings']);
        $message->setMapSettings($values['map_settings']);
        $message->setLevelSettings($values['level_settings']);
        $message->setInventorySettings($values['inventory_settings']);
        $message->setMinimumClientVersion($values['minimum_client_version']);
        $message->setGpsSettings($values['gps_settings']);
        $message->setFestivalSettings($values['festival_settings']);
        $message->setEventSettings($values['event_settings']);
        $message->setMaxPokemonTypes($values['max_pokemon_types']);
        $message->setSfidaSettings($values['sfida_settings']);
        $message->setNewsSettings($values['news_settings']);
        $message->setTranslationSettings($values['translation_settings']);
        $message->setPasscodeSettings($values['passcode_settings']);
        $message->setNotificationSettings($values['notification_settings']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GlobalSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'fort_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.FortSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'map_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.MapSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'level_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.LevelSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'inventory_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.InventorySettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'minimum_client_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'gps_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.GpsSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'festival_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.FestivalSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'event_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.EventSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'max_pokemon_types',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'sfida_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.SfidaSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'news_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.NewsSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'translation_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.TranslationSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'passcode_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.PasscodeSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'notification_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.NotificationSettings'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->fort_settings !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->fort_settings->serializedSize($sizeContext));
            $this->fort_settings->writeTo($context);
        }

        if ($this->map_settings !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->map_settings->serializedSize($sizeContext));
            $this->map_settings->writeTo($context);
        }

        if ($this->level_settings !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->level_settings->serializedSize($sizeContext));
            $this->level_settings->writeTo($context);
        }

        if ($this->inventory_settings !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->inventory_settings->serializedSize($sizeContext));
            $this->inventory_settings->writeTo($context);
        }

        if ($this->minimum_client_version !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->minimum_client_version);
        }

        if ($this->gps_settings !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->gps_settings->serializedSize($sizeContext));
            $this->gps_settings->writeTo($context);
        }

        if ($this->festival_settings !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->festival_settings->serializedSize($sizeContext));
            $this->festival_settings->writeTo($context);
        }

        if ($this->event_settings !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->event_settings->serializedSize($sizeContext));
            $this->event_settings->writeTo($context);
        }

        if ($this->max_pokemon_types !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->max_pokemon_types);
        }

        if ($this->sfida_settings !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->sfida_settings->serializedSize($sizeContext));
            $this->sfida_settings->writeTo($context);
        }

        if ($this->news_settings !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeVarint($stream, $this->news_settings->serializedSize($sizeContext));
            $this->news_settings->writeTo($context);
        }

        if ($this->translation_settings !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeVarint($stream, $this->translation_settings->serializedSize($sizeContext));
            $this->translation_settings->writeTo($context);
        }

        if ($this->passcode_settings !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeVarint($stream, $this->passcode_settings->serializedSize($sizeContext));
            $this->passcode_settings->writeTo($context);
        }

        if ($this->notification_settings !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeVarint($stream, $this->notification_settings->serializedSize($sizeContext));
            $this->notification_settings->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\FortSettings();

                $this->fort_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\MapSettings();

                $this->map_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\LevelSettings();

                $this->level_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\InventorySettings();

                $this->inventory_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->minimum_client_version = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\GpsSettings();

                $this->gps_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\FestivalSettings();

                $this->festival_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\EventSettings();

                $this->event_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->max_pokemon_types = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\SfidaSettings();

                $this->sfida_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\NewsSettings();

                $this->news_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\TranslationSettings();

                $this->translation_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\PasscodeSettings();

                $this->passcode_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\NotificationSettings();

                $this->notification_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->fort_settings !== null) {
            $innerSize = $this->fort_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->map_settings !== null) {
            $innerSize = $this->map_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->level_settings !== null) {
            $innerSize = $this->level_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->inventory_settings !== null) {
            $innerSize = $this->inventory_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->minimum_client_version !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->minimum_client_version);
        }

        if ($this->gps_settings !== null) {
            $innerSize = $this->gps_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->festival_settings !== null) {
            $innerSize = $this->festival_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->event_settings !== null) {
            $innerSize = $this->event_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->max_pokemon_types !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_pokemon_types);
        }

        if ($this->sfida_settings !== null) {
            $innerSize = $this->sfida_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->news_settings !== null) {
            $innerSize = $this->news_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->translation_settings !== null) {
            $innerSize = $this->translation_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->passcode_settings !== null) {
            $innerSize = $this->passcode_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->notification_settings !== null) {
            $innerSize = $this->notification_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->fort_settings = null;
        $this->map_settings = null;
        $this->level_settings = null;
        $this->inventory_settings = null;
        $this->minimum_client_version = null;
        $this->gps_settings = null;
        $this->festival_settings = null;
        $this->event_settings = null;
        $this->max_pokemon_types = null;
        $this->sfida_settings = null;
        $this->news_settings = null;
        $this->translation_settings = null;
        $this->passcode_settings = null;
        $this->notification_settings = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\GlobalSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->fort_settings = ($message->fort_settings !== null) ? $message->fort_settings : $this->fort_settings;
        $this->map_settings = ($message->map_settings !== null) ? $message->map_settings : $this->map_settings;
        $this->level_settings = ($message->level_settings !== null) ? $message->level_settings : $this->level_settings;
        $this->inventory_settings = ($message->inventory_settings !== null) ? $message->inventory_settings : $this->inventory_settings;
        $this->minimum_client_version = ($message->minimum_client_version !== null) ? $message->minimum_client_version : $this->minimum_client_version;
        $this->gps_settings = ($message->gps_settings !== null) ? $message->gps_settings : $this->gps_settings;
        $this->festival_settings = ($message->festival_settings !== null) ? $message->festival_settings : $this->festival_settings;
        $this->event_settings = ($message->event_settings !== null) ? $message->event_settings : $this->event_settings;
        $this->max_pokemon_types = ($message->max_pokemon_types !== null) ? $message->max_pokemon_types : $this->max_pokemon_types;
        $this->sfida_settings = ($message->sfida_settings !== null) ? $message->sfida_settings : $this->sfida_settings;
        $this->news_settings = ($message->news_settings !== null) ? $message->news_settings : $this->news_settings;
        $this->translation_settings = ($message->translation_settings !== null) ? $message->translation_settings : $this->translation_settings;
        $this->passcode_settings = ($message->passcode_settings !== null) ? $message->passcode_settings : $this->passcode_settings;
        $this->notification_settings = ($message->notification_settings !== null) ? $message->notification_settings : $this->notification_settings;
    }


}

