<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Map/Pokemon/MotivatedPokemon.proto
 */


namespace POGOProtos\Map\Pokemon;

/**
 * Protobuf message : POGOProtos.Map.Pokemon.MotivatedPokemon
 */
class MotivatedPokemon extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * pokemon optional message = 1
     *
     * @var \POGOProtos\Data\PokemonData
     */
    protected $pokemon = null;

    /**
     * deploy_ms optional int64 = 2
     *
     * @var int
     */
    protected $deploy_ms = null;

    /**
     * cp_when_deployed optional int32 = 3
     *
     * @var int
     */
    protected $cp_when_deployed = null;

    /**
     * motivation_now optional double = 4
     *
     * @var float
     */
    protected $motivation_now = null;

    /**
     * cp_now optional int32 = 5
     *
     * @var int
     */
    protected $cp_now = null;

    /**
     * berry_value optional float = 6
     *
     * @var float
     */
    protected $berry_value = null;

    /**
     * feed_cooldown_duration_millis optional int64 = 7
     *
     * @var int
     */
    protected $feed_cooldown_duration_millis = null;

    /**
     * food_value repeated message = 8
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\FoodValue>
     */
    protected $food_value = null;

    /**
     * Check if 'pokemon' has a value
     *
     * @return bool
     */
    public function hasPokemon()
    {
        return $this->pokemon !== null;
    }

    /**
     * Get 'pokemon' value
     *
     * @return \POGOProtos\Data\PokemonData
     */
    public function getPokemon()
    {
        return $this->pokemon;
    }

    /**
     * Set 'pokemon' value
     *
     * @param \POGOProtos\Data\PokemonData $value
     */
    public function setPokemon(\POGOProtos\Data\PokemonData $value = null)
    {
        $this->pokemon = $value;
    }

    /**
     * Check if 'deploy_ms' has a value
     *
     * @return bool
     */
    public function hasDeployMs()
    {
        return $this->deploy_ms !== null;
    }

    /**
     * Get 'deploy_ms' value
     *
     * @return int
     */
    public function getDeployMs()
    {
        return $this->deploy_ms;
    }

    /**
     * Set 'deploy_ms' value
     *
     * @param int $value
     */
    public function setDeployMs($value = null)
    {
        $this->deploy_ms = $value;
    }

    /**
     * Check if 'cp_when_deployed' has a value
     *
     * @return bool
     */
    public function hasCpWhenDeployed()
    {
        return $this->cp_when_deployed !== null;
    }

    /**
     * Get 'cp_when_deployed' value
     *
     * @return int
     */
    public function getCpWhenDeployed()
    {
        return $this->cp_when_deployed;
    }

    /**
     * Set 'cp_when_deployed' value
     *
     * @param int $value
     */
    public function setCpWhenDeployed($value = null)
    {
        $this->cp_when_deployed = $value;
    }

    /**
     * Check if 'motivation_now' has a value
     *
     * @return bool
     */
    public function hasMotivationNow()
    {
        return $this->motivation_now !== null;
    }

    /**
     * Get 'motivation_now' value
     *
     * @return float
     */
    public function getMotivationNow()
    {
        return $this->motivation_now;
    }

    /**
     * Set 'motivation_now' value
     *
     * @param float $value
     */
    public function setMotivationNow($value = null)
    {
        $this->motivation_now = $value;
    }

    /**
     * Check if 'cp_now' has a value
     *
     * @return bool
     */
    public function hasCpNow()
    {
        return $this->cp_now !== null;
    }

    /**
     * Get 'cp_now' value
     *
     * @return int
     */
    public function getCpNow()
    {
        return $this->cp_now;
    }

    /**
     * Set 'cp_now' value
     *
     * @param int $value
     */
    public function setCpNow($value = null)
    {
        $this->cp_now = $value;
    }

    /**
     * Check if 'berry_value' has a value
     *
     * @return bool
     */
    public function hasBerryValue()
    {
        return $this->berry_value !== null;
    }

    /**
     * Get 'berry_value' value
     *
     * @return float
     */
    public function getBerryValue()
    {
        return $this->berry_value;
    }

    /**
     * Set 'berry_value' value
     *
     * @param float $value
     */
    public function setBerryValue($value = null)
    {
        $this->berry_value = $value;
    }

    /**
     * Check if 'feed_cooldown_duration_millis' has a value
     *
     * @return bool
     */
    public function hasFeedCooldownDurationMillis()
    {
        return $this->feed_cooldown_duration_millis !== null;
    }

    /**
     * Get 'feed_cooldown_duration_millis' value
     *
     * @return int
     */
    public function getFeedCooldownDurationMillis()
    {
        return $this->feed_cooldown_duration_millis;
    }

    /**
     * Set 'feed_cooldown_duration_millis' value
     *
     * @param int $value
     */
    public function setFeedCooldownDurationMillis($value = null)
    {
        $this->feed_cooldown_duration_millis = $value;
    }

    /**
     * Check if 'food_value' has a value
     *
     * @return bool
     */
    public function hasFoodValueList()
    {
        return $this->food_value !== null;
    }

    /**
     * Get 'food_value' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\FoodValue>
     */
    public function getFoodValueList()
    {
        return $this->food_value;
    }

    /**
     * Set 'food_value' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\FoodValue> $value
     */
    public function setFoodValueList(\Protobuf\Collection $value = null)
    {
        $this->food_value = $value;
    }

    /**
     * Add a new element to 'food_value'
     *
     * @param \POGOProtos\Data\FoodValue $value
     */
    public function addFoodValue(\POGOProtos\Data\FoodValue $value)
    {
        if ($this->food_value === null) {
            $this->food_value = new \Protobuf\MessageCollection();
        }

        $this->food_value->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'pokemon' => null,
            'deploy_ms' => null,
            'cp_when_deployed' => null,
            'motivation_now' => null,
            'cp_now' => null,
            'berry_value' => null,
            'feed_cooldown_duration_millis' => null,
            'food_value' => []
        ], $values);

        $message->setPokemon($values['pokemon']);
        $message->setDeployMs($values['deploy_ms']);
        $message->setCpWhenDeployed($values['cp_when_deployed']);
        $message->setMotivationNow($values['motivation_now']);
        $message->setCpNow($values['cp_now']);
        $message->setBerryValue($values['berry_value']);
        $message->setFeedCooldownDurationMillis($values['feed_cooldown_duration_millis']);

        foreach ($values['food_value'] as $item) {
            $message->addFoodValue($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'MotivatedPokemon',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'pokemon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Data.PokemonData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'deploy_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'cp_when_deployed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'motivation_now',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'cp_now',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'berry_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'feed_cooldown_duration_millis',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'food_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.FoodValue'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->pokemon !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->pokemon->serializedSize($sizeContext));
            $this->pokemon->writeTo($context);
        }

        if ($this->deploy_ms !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->deploy_ms);
        }

        if ($this->cp_when_deployed !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->cp_when_deployed);
        }

        if ($this->motivation_now !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeDouble($stream, $this->motivation_now);
        }

        if ($this->cp_now !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->cp_now);
        }

        if ($this->berry_value !== null) {
            $writer->writeVarint($stream, 53);
            $writer->writeFloat($stream, $this->berry_value);
        }

        if ($this->feed_cooldown_duration_millis !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->feed_cooldown_duration_millis);
        }

        if ($this->food_value !== null) {
            foreach ($this->food_value as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\PokemonData();

                $this->pokemon = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->deploy_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->cp_when_deployed = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->motivation_now = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->cp_now = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->berry_value = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->feed_cooldown_duration_millis = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\FoodValue();

                if ($this->food_value === null) {
                    $this->food_value = new \Protobuf\MessageCollection();
                }

                $this->food_value->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->pokemon !== null) {
            $innerSize = $this->pokemon->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->deploy_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->deploy_ms);
        }

        if ($this->cp_when_deployed !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cp_when_deployed);
        }

        if ($this->motivation_now !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->cp_now !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cp_now);
        }

        if ($this->berry_value !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->feed_cooldown_duration_millis !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->feed_cooldown_duration_millis);
        }

        if ($this->food_value !== null) {
            foreach ($this->food_value as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->pokemon = null;
        $this->deploy_ms = null;
        $this->cp_when_deployed = null;
        $this->motivation_now = null;
        $this->cp_now = null;
        $this->berry_value = null;
        $this->feed_cooldown_duration_millis = null;
        $this->food_value = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Map\Pokemon\MotivatedPokemon) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->pokemon = ($message->pokemon !== null) ? $message->pokemon : $this->pokemon;
        $this->deploy_ms = ($message->deploy_ms !== null) ? $message->deploy_ms : $this->deploy_ms;
        $this->cp_when_deployed = ($message->cp_when_deployed !== null) ? $message->cp_when_deployed : $this->cp_when_deployed;
        $this->motivation_now = ($message->motivation_now !== null) ? $message->motivation_now : $this->motivation_now;
        $this->cp_now = ($message->cp_now !== null) ? $message->cp_now : $this->cp_now;
        $this->berry_value = ($message->berry_value !== null) ? $message->berry_value : $this->berry_value;
        $this->feed_cooldown_duration_millis = ($message->feed_cooldown_duration_millis !== null) ? $message->feed_cooldown_duration_millis : $this->feed_cooldown_duration_millis;
        $this->food_value = ($message->food_value !== null) ? $message->food_value : $this->food_value;
    }


}

