<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos/Networking/Responses/GetInboxResponse.proto
 */


namespace POGOProtos\Networking\Responses\GetInboxResponse\ClientInbox;

/**
 * Protobuf message :
 * POGOProtos.Networking.Responses.GetInboxResponse.ClientInbox.TemplateVariable
 */
class TemplateVariable extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * name optional string = 1
     *
     * @var string
     */
    protected $name = null;

    /**
     * literal optional string = 2
     *
     * @var string
     */
    protected $literal = null;

    /**
     * key optional string = 3
     *
     * @var string
     */
    protected $key = null;

    /**
     * lookup_table optional string = 4
     *
     * @var string
     */
    protected $lookup_table = null;

    /**
     * byte_value optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $byte_value = null;

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'literal' has a value
     *
     * @return bool
     */
    public function hasLiteral()
    {
        return $this->literal !== null;
    }

    /**
     * Get 'literal' value
     *
     * @return string
     */
    public function getLiteral()
    {
        return $this->literal;
    }

    /**
     * Set 'literal' value
     *
     * @param string $value
     */
    public function setLiteral($value = null)
    {
        $this->literal = $value;
    }

    /**
     * Check if 'key' has a value
     *
     * @return bool
     */
    public function hasKey()
    {
        return $this->key !== null;
    }

    /**
     * Get 'key' value
     *
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * Set 'key' value
     *
     * @param string $value
     */
    public function setKey($value = null)
    {
        $this->key = $value;
    }

    /**
     * Check if 'lookup_table' has a value
     *
     * @return bool
     */
    public function hasLookupTable()
    {
        return $this->lookup_table !== null;
    }

    /**
     * Get 'lookup_table' value
     *
     * @return string
     */
    public function getLookupTable()
    {
        return $this->lookup_table;
    }

    /**
     * Set 'lookup_table' value
     *
     * @param string $value
     */
    public function setLookupTable($value = null)
    {
        $this->lookup_table = $value;
    }

    /**
     * Check if 'byte_value' has a value
     *
     * @return bool
     */
    public function hasByteValue()
    {
        return $this->byte_value !== null;
    }

    /**
     * Get 'byte_value' value
     *
     * @return \Protobuf\Stream
     */
    public function getByteValue()
    {
        return $this->byte_value;
    }

    /**
     * Set 'byte_value' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setByteValue($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->byte_value = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'name' => null,
            'literal' => null,
            'key' => null,
            'lookup_table' => null,
            'byte_value' => null
        ], $values);

        $message->setName($values['name']);
        $message->setLiteral($values['literal']);
        $message->setKey($values['key']);
        $message->setLookupTable($values['lookup_table']);
        $message->setByteValue($values['byte_value']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TemplateVariable',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'literal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'lookup_table',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'byte_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->name);
        }

        if ($this->literal !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->literal);
        }

        if ($this->key !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->key);
        }

        if ($this->lookup_table !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->lookup_table);
        }

        if ($this->byte_value !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->byte_value);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->literal = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->key = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->lookup_table = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->byte_value = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->literal !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->literal);
        }

        if ($this->key !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->key);
        }

        if ($this->lookup_table !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->lookup_table);
        }

        if ($this->byte_value !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->byte_value);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->name = null;
        $this->literal = null;
        $this->key = null;
        $this->lookup_table = null;
        $this->byte_value = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Responses\GetInboxResponse\ClientInbox\TemplateVariable) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->literal = ($message->literal !== null) ? $message->literal : $this->literal;
        $this->key = ($message->key !== null) ? $message->key : $this->key;
        $this->lookup_table = ($message->lookup_table !== null) ? $message->lookup_table : $this->lookup_table;
        $this->byte_value = ($message->byte_value !== null) ? $message->byte_value : $this->byte_value;
    }


}

