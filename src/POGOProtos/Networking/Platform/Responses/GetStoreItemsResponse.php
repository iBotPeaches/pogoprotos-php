<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor :
 * POGOProtos/Networking/Platform/Responses/GetStoreItemsResponse.proto
 */


namespace POGOProtos\Networking\Platform\Responses;

/**
 * Protobuf message :
 * POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse
 */
class GetStoreItemsResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * status optional enum = 1
     *
     * @var \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\Status
     */
    protected $status = null;

    /**
     * items repeated message = 2
     *
     * @var \Protobuf\Collection<\POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\StoreItem>
     */
    protected $items = null;

    /**
     * player_currencies repeated message = 3
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\Player\Currency>
     */
    protected $player_currencies = null;

    /**
     * hash optional string = 4
     *
     * @var string
     */
    protected $hash = null;

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\Status
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\Status $value
     */
    public function setStatus(\POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\Status $value = null)
    {
        $this->status = $value;
    }

    /**
     * Check if 'items' has a value
     *
     * @return bool
     */
    public function hasItemsList()
    {
        return $this->items !== null;
    }

    /**
     * Get 'items' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\StoreItem>
     */
    public function getItemsList()
    {
        return $this->items;
    }

    /**
     * Set 'items' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\StoreItem> $value
     */
    public function setItemsList(\Protobuf\Collection $value = null)
    {
        $this->items = $value;
    }

    /**
     * Add a new element to 'items'
     *
     * @param \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\StoreItem
     * $value
     */
    public function addItems(\POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\StoreItem $value)
    {
        if ($this->items === null) {
            $this->items = new \Protobuf\MessageCollection();
        }

        $this->items->add($value);
    }

    /**
     * Check if 'player_currencies' has a value
     *
     * @return bool
     */
    public function hasPlayerCurrenciesList()
    {
        return $this->player_currencies !== null;
    }

    /**
     * Get 'player_currencies' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\Player\Currency>
     */
    public function getPlayerCurrenciesList()
    {
        return $this->player_currencies;
    }

    /**
     * Set 'player_currencies' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\Player\Currency> $value
     */
    public function setPlayerCurrenciesList(\Protobuf\Collection $value = null)
    {
        $this->player_currencies = $value;
    }

    /**
     * Add a new element to 'player_currencies'
     *
     * @param \POGOProtos\Data\Player\Currency $value
     */
    public function addPlayerCurrencies(\POGOProtos\Data\Player\Currency $value)
    {
        if ($this->player_currencies === null) {
            $this->player_currencies = new \Protobuf\MessageCollection();
        }

        $this->player_currencies->add($value);
    }

    /**
     * Check if 'hash' has a value
     *
     * @return bool
     */
    public function hasHash()
    {
        return $this->hash !== null;
    }

    /**
     * Get 'hash' value
     *
     * @return string
     */
    public function getHash()
    {
        return $this->hash;
    }

    /**
     * Set 'hash' value
     *
     * @param string $value
     */
    public function setHash($value = null)
    {
        $this->hash = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'status' => null,
            'items' => [],
            'player_currencies' => [],
            'hash' => null
        ], $values);

        $message->setStatus($values['status']);
        $message->setHash($values['hash']);

        foreach ($values['items'] as $item) {
            $message->addItems($item);
        }

        foreach ($values['player_currencies'] as $item) {
            $message->addPlayerCurrencies($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GetStoreItemsResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.Status'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'player_currencies',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.Player.Currency'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'hash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->status !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->status->value());
        }

        if ($this->items !== null) {
            foreach ($this->items as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->player_currencies !== null) {
            foreach ($this->player_currencies as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->hash !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->hash);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->status = \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\Status::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse\StoreItem();

                if ($this->items === null) {
                    $this->items = new \Protobuf\MessageCollection();
                }

                $this->items->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\Player\Currency();

                if ($this->player_currencies === null) {
                    $this->player_currencies = new \Protobuf\MessageCollection();
                }

                $this->player_currencies->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->hash = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->status !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->status->value());
        }

        if ($this->items !== null) {
            foreach ($this->items as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->player_currencies !== null) {
            foreach ($this->player_currencies as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->hash !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->hash);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->status = null;
        $this->items = null;
        $this->player_currencies = null;
        $this->hash = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->status = ($message->status !== null) ? $message->status : $this->status;
        $this->items = ($message->items !== null) ? $message->items : $this->items;
        $this->player_currencies = ($message->player_currencies !== null) ? $message->player_currencies : $this->player_currencies;
        $this->hash = ($message->hash !== null) ? $message->hash : $this->hash;
    }


}

